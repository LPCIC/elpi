kind tm type.
type c (tm -> A) -> tm.
macro @ctx A :- c (_\ A). % to have depth > 0 in unif

% to test the indexing
k1 (x\ g x).
k2 g.

%mode (foo i i).
pred foo i:(X -> X), i:(X -> X -> X).
foo X (x1 \ (x2 \ X x2)) :- (print X).
%% Fails, but should output `y`

main :-
  pi f y\
    % 4 branches in unif
    @ctx (x\ f x) = @ctx f,
    @ctx f = @ctx (x\ f x),
    @ctx (x\ f y x) = @ctx (f y),
    @ctx (f y) = @ctx (x\ f y x),

    % put some uvar around
    @ctx (f (X y)) = @ctx (x\ f y x), print X,
    @ctx (x\ f y x) = @ctx (f (Y y)), print Y,

    % index + adepth=2 <> bdepth=0
    k1 g,
    k2 (x\ g x),
    
    % regression #135
    foo y (x1 \ (x2 \ y x2))
.
