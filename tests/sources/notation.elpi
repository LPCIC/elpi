module test.
/*
infixl x+,y+ 190.
infixr x++ 191.
prefixr z+ 191.
postfixl w+ 190.
infixl x* 200.
*/
X +x D.

foo xx uu.

~z x ?w.

x *x y +x z *x w.

a +x b +x c +x d +x e.
a ++x b ++x c ++x d ++x e.

type a, b, d, x, xx, w, y, z, c, cd, e, uu prop.
type f prop -> prop.
type g list prop -> prop.
type foo prop -> prop -> prop.
type (~z) prop -> prop.
type (?w) prop -> prop.
type (+x) prop -> prop -> prop.
type (++x) prop -> prop -> prop.
type (+y) A -> B -> C.
type (*x) A -> B -> C.

main :- print (f a +x g [b] +y d), cd +x d.

