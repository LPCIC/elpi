kind term type.
type app term -> term -> term.
type lam (term -> term) -> term.

kind ty type.
type arr ty -> ty -> ty.
type nat ty.
type bool ty.

pred term i:term, o:ty.
term (app HD ARG) TGT :- term HD (arr SRC TGT), term ARG SRC.
term (lam F) (arr SRC TGT) :- pi x\ term x SRC => term (F x) TGT.
term (uvar as X) T :- declare_constraint (term X T) [X].

pred len i:list A, o:int.
len [] 0.
len [_|XS] N :- len XS M, N is M + 1.

constraint term {
  rule
     \ (term (uvar K LX) _) (term (uvar K LY) _)
     | (len LX N, len LY M, not(N = M))
   <=> (print "wrong arity" K, false).

  rule (GX ?- term (uvar K LX) TX)
     \ (GY ?- term (uvar K LY) TY)
     | (print "compat" GX "|-" K LX TX "," GY "|-" K LY TY, 
        compatible GX LX GY LY CTXCONSTR)
   <=> (print "NEW" CTXCONSTR TX "=" TY, CTXCONSTR, TX = TY).

}

pred compatible i:list prop, i:list term,i:list prop,i:list term,o:list prop.
compatible _ [] _ [] [] :- !.
compatible GX [X|XS] GY [Y|YS] [TX = TY | K] :-
 (GX => term X TX),
 (GY => term Y TY),
 !,
 compatible GX XS GY YS K.
compatible _ _ _ _ [false].

main :-
  (term (lam x\ lam y\ app (app (F x y) x) y) T1_, 
   term (lam y\ lam x\ app (app (F x y) y) x) T2_),
  print "1",
  (term (lam x \ X x) (arr A_ nat),
   term (lam x \ X x) (arr bool B_)),
  print "2",
  not(term (lam x \ Y x) (arr C nat), term (lam x \ Y x) (arr bool C)),
  not(term (lam x \ Z x) (arr nat nat), term (lam x \ Z x) (arr bool D_)).

