kind i type.
type app i -> i -> i.
type lam (i -> i) -> i.
type copy i -> i -> prop.
type cbv i -> i -> prop.
type beta i -> i -> i -> prop.
type subst (i -> i) -> i -> i -> prop.
type cbn i -> i -> prop.

%copy X Y :- print "XXXXXXXXX" (copy X Y), fail.
copy (app M N) (app M2 N2) :- copy M M2, copy N N2.
copy (lam F) (lam F2) :- pi x\ copy x x => copy (F x) (F2 x).

%cbn X Y :- print "XXXXXXXXX" (cbn X Y), fail.
cbn (lam F) (lam F2) :- !, pi x\cbn x x => copy x x => cbn (F x) (F2 x). 
cbn (app (lam F) N) M :- !, subst F N B, cbn B M.
cbn (app M N) R :- cbn M (lam F), !, cbn (app (lam F) N) R.
cbn (app X Y) (app X2 Y2) :- cbn X X2, cbn Y Y2.

%subst F N B :- print "XXXXXXXXX" (subst F N B), fail.
subst F N B :- pi x\ copy x N => copy (F x) (B2 x), B = B2 x.

main :-
 ZERO = (lam s\ lam z\ z),
 SUCC = (lam n\ lam s\ lam z\ app s (app (app n s) z)),
 cbn (app SUCC ZERO) ONE,
 PLUS = (lam n\ lam m\ lam s\ lam z\ app (app n s) (app (app m s) z)),
 MULT = (lam n\ lam m\ lam s\ app n (app m s)),
 cbn (app SUCC (app SUCC ZERO)) TWO,
 cbn (app (app PLUS (app (app PLUS TWO) TWO)) TWO) SIX,
 cbn (app (app MULT SIX) TWO) TWELVE,
 cbn (app (app PLUS SIX) SIX) TWELVE,
 EXP = (lam n\ lam m\ app n m),
 cbn (app (app PLUS TWO) ONE) THREE,
 cbn (app (app EXP TWO) THREE) NINE,
 cbn (app (app MULT THREE) THREE) NINE,
 cbn (app (app MULT TWO) TWO) FOUR,
 cbn (app (app PLUS THREE) TWO) FIVE,
 cbn (app (app PLUS FOUR) TWO) SIX,
 cbn (app (app EXP FIVE) FIVE) RES,
 cbn (app (app EXP FIVE) FIVE) RES,
 cbn (app (app EXP FIVE) FIVE) RES,
 cbn (app (app EXP FIVE) FIVE) RES,
 cbn (app (app EXP FIVE) FIVE) RES,
 cbn (app (app EXP FIVE) FIVE) RES.
