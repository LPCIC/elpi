pred p o:int, o:int.
pred q o:int, o:int.
p 1 1.
p 1 2.
p 2 2.

test1 :- std.findall (p A B) [p 1 1, p 1 2, p 2 2].
test2 :- std.findall (p _ _) [p X 1, p 1 2, p 2 2], not(var X).
test3 :-
  pi q\
    q 1 1 =>
    q 1 2 =>
    q 2 2 =>
      (std.findall (q _ _) [q X 2, q 1 2, q 1 1], not (var X)).


test4 :-
  pi q\
    q 1 A =>
    q 2 A =>
      (std.findall (q _ _) [q 2 X, q 1 Y], not(same_var X Y)).
% this is super tricky but hard to implement differently.
% q _ _ -> q A^1 B^1
% q A^1 B^1 == q 1 X0 --restrict--> X0 := X1,  A1 := _\X1
% when we backtrack the "restriction" on X0 is lost

test5 :-
  pi q\
    q 1 A =>
    q 2 A =>
      (std.findall (q _ Z) [q 2 X, q 1 Y], same_var X Y).
% this works because there is no restriction

main :- test1, print 1,
        test2, print 2,
        test3, print 3,
        test4, print 4,
        test5, print 5.