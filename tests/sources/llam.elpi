pred spy i:prop.
spy X :-  counter "run" N, print N "test " X, 
  not(not(X)).

type test ((A -> A -> prop) -> B -> prop) -> B -> prop.
test P T :-
  spy(P (x\y\x = y) F, F = T),
  spy(P (x\y\y = x) F, F = T),
  spy(pi dummy\ sigma F\ P (x\y\x = y) F, F = T),
  spy(pi dummy\ sigma F\ P (x\y\y = x) F, F = T)
  , print "----------------------------------------"
  .

pred clause o:any.
clause (x\y\F y x) :- F = a\b\b.
pred clause1 o:any.
clause1 (x\y\x).
pred clause2 o:any.
clause2 (x\y\(X x : prop), (F y (X x) : prop)) :- F = a\b\b.
pred clause3 o:any.

type r A -> B.
pred prune_arg o:any.
pred prune_arg2 o:any.
pred prune_arg3 o:any.
prune_arg (r F).
prune_arg2 (r (x\F x)).
prune_arg3 (r (x\y\F y x)).

type whatever, h, f, v A.

main :-
  test (eq\F\        pi x\ pi y\ eq (F y x) x)             (a\b\b),
  test (eq\F\   not (pi x\ pi y\ eq (F x) y))              whatever,
  test (eq\F\        pi x\ pi y\ eq (F y x) (r (w\h w x))) (a\b\r (x\h x b)),
  test (eq\F\        pi x\ pi y\ sigma R\ R = x, eq (F y x) R)             (a\b\b),
  test (eq\F\   not (pi x\ pi y\ sigma R\ R = x, eq (F R) y))              whatever,
  test (eq\F\        pi x\ pi y\ sigma R\ R = x, eq (F y x) (r (w\h w R))) (a\b\r (x\h x b)),
  spy (pi dummy\ clause (x\y\x)),
  spy (pi dummy\ clause1 (x\y\F y x), F = a\b\b),
  spy (pi dummy\ clause2 (x\y\x , x)),
  spy (clause3 (x\y\G y x) => pi dummy\ clause3 (x\y\x)), (G = a\b\b),
  test (eq\F\        sigma H\pi x\ pi y\ eq (F y) (r (H y x)), H x x = x, H x y = x)   (a\r a),

  % this is hard because F<H but is applied to y that H can see, so H is restricted to the
  % level of F (that alone would prune y) but applied to y, so H 1 = y works
  test (eq\F\        pi x\ pi y\ sigma H\ pi z\pi w\eq (F y) (r (H w)),
                                                    spy(H 1 = y), not(H 2 = x))
       (a\r whatever),
  test (eq\F\        pi x\ pi y\ sigma H\ pi w\eq (F y x) (r (H w)),
                                               H 1 = f x y)
       (a\b\r (f b a)),
 
  test (eq\F\        pi x\pi y\prune_arg (F y x))  (a\b\r (v a b)),
  test (eq\F\        pi x\pi y\prune_arg2 (F y x)) (a\b\r (x\v a b)),
  test (eq\F\        pi x\pi y\prune_arg3 (F y x)) (a\b\r (x\y\v a b)),
 
  true.
