kind my_list type.
type mcons int -> my_list -> my_list.
type mint int -> my_list.
type mstring string -> my_list.
type mlist my_list -> my_list -> my_list.
type mnil my_list.

:index (_ 33 _)
pred my_pred o:my_list, o:int.
my_pred mnil 2.
my_pred (mlist (mcons 0 mnil) (mcons 1 mnil)) 3.
my_pred (mlist (mcons 1 mnil) (mcons 2 mnil)) 4.
my_pred (mcons 0 (mint 0)) 5.
my_pred (mint X) 6 :- X = 3.
my_pred (mstring "a") 7.
my_pred (mstring "a") 8.
my_pred (mstring "b") 9.

:index (33)
pred order o:int. 
order 0 :- print "0".
order _ :- print "1".
order 2 :- print "2".
order _ :- print "3".

main :- 
  print "first attempt with 0",
  (order 0, fail);
  print "second attempt with 1",
  (order 1, fail);
  print "third attempt with 2",
  (order 2, fail);
  print "fourth attempt with X",
  (order X, fail).

% main :- 
%   my_pred (mstring X) Y, 
%   print "Solution" X, fail.

main :- print "End backtracking".