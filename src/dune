(library
  (name elpi)
  (public_name elpi)
  (preprocess (per_module
    ((action (run ppxfindcache_deriving_std %{input-file}
                    --cache-file %{dep:.ppcache/util.ml}
                    --cache-file %{dep:.ppcache/util.mli}
                    --cache-file %{dep:.ppcache/ast.ml}
                    --cache-file %{dep:.ppcache/ast.mli}
                    --cache-file %{dep:.ppcache/data.ml}
                    --cache-file %{dep:.ppcache/compiler.ml}
                    --cache-file %{dep:.ppcache/compiler.mli}))
              ast data compiler)
    ((action (run ppxfindcache_elpi_trace_deriving_std %{input-file}
                    --ppx-opt --cookie
                    --ppx-opt "elpi_trace=\"true\""
                    --cache-file %{dep:.ppcache/runtime_trace_on.ml}
                    --cache-file %{dep:.ppcache/runtime_trace_on.mli}))
              runtime_trace_on)
    ((action (run ppxfindcache_elpi_trace_deriving_std %{input-file}
                    --ppx-opt --cookie
                    --ppx-opt "elpi_trace=\"false\""
                    --cache-file %{dep:.ppcache/runtime_trace_off.ml}
                    --cache-file %{dep:.ppcache/runtime_trace_off.mli}))
              runtime_trace_off)
    ((action (run camlp5o -I . -I +camlp5 pa_extend.cmo pa_lexer.cmo %{input-file})) parser)
    ))
  (libraries re.str camlp5.gramlib unix elpi.trace.runtime
     (select ppx_deriving_runtime_proxy.ml from
       (ppx_deriving.runtime -> ppx_deriving_runtime_proxy.ppx.ml)
       (-> ppx_deriving_runtime_proxy.embed.ml)
       ))
  (flags -linkall)
  (modules elpi util parser ast compiler data ptmap builtin builtin_checker builtin_stdlib builtin_map builtin_set builtin_ppx API runtime_trace_on runtime_trace_off ppx_deriving_runtime_proxy)
  (private_modules util parser ast compiler data ptmap builtin_stdlib builtin_map builtin_set builtin_ppx runtime_trace_on runtime_trace_off ppx_deriving_runtime_proxy)
)

(dirs .ppcache)

(rule (copy# runtime.ml runtime_trace_on.ml))
(rule (copy# runtime.ml runtime_trace_off.ml))
(rule (copy# runtime.mli runtime_trace_on.mli))
(rule (copy# runtime.mli runtime_trace_off.mli))
(rule (with-stdout-to builtin_stdlib.ml (progn
  (echo "let code = {code|#line 0 \"builtin_stdlib.elpi\"\n")
  (cat builtin_stdlib.elpi)
  (echo "|code};;")
)))
(rule (with-stdout-to builtin_map.ml (progn
  (echo "let code = {code|#line 0 \"builtin_map.elpi\"\n")
  (cat builtin_map.elpi)
  (echo "|code};;")
)))
(rule (with-stdout-to builtin_set.ml (progn
  (echo "let code = {code|#line 0 \"builtin_set.elpi\"\n")
  (cat builtin_set.elpi)
  (echo "|code};;")
)))
(rule (with-stdout-to builtin_ppx.ml (progn
  (echo "let code = {code|#line 0 \"builtin_ppx.elpi\"\n")
  (cat builtin_ppx.elpi)
  (echo "|code};;")
)))
(rule (with-stdout-to builtin_checker.ml (progn
  (echo "let code = {code|")
  (echo "#line 0 \"elpi-quoted_syntax.elpi\"\n")
  (cat elpi-quoted_syntax.elpi)
  (echo "#line 0 \"elpi-checker.elpi\"\n")
  (cat elpi-checker.elpi)
  (echo "|code};;")
)))


(install
  (section lib)
  (files builtin.elpi elpi-quoted_syntax.elpi elpi2html.elpi)
)

(rule
  (targets builtin.elpi)
  (mode promote)
  (action (with-stdout-to %{targets}
    (progn
      (echo "% File generated by elpi -document-builtins, do not edit")
      (run elpi -document-builtins))))
)

(executable
  (name merlinppx)
  (promote)
  (modules merlinppx)
  (libraries
    (select merlinppx.ml from
     (elpi.trace.ppx ppx_deriving.std -> merlinppx.ppx.ml)
     (-> merlinppx.noop.ml)))
  (flags -linkall)
)
