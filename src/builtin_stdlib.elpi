% == stdlib =======================================================

% Conventions:
% - all predicates declare a mode with some input arguments, unless...
% - predicates whose name ends with R are relations (work in any direction,
%   that is all arguments are in output mode)
% - predicates whose name ends with ! do contain a cut and generate only the
%   first result
% - all errors given by this library end up calling fatal-error[-w-data],
%   override it in order to handle them differently
% - all debug prints by this library end up calling debug-print, override it
%   in order to handle them differently

namespace std {

func fatal-error string.
:name "default-fatal-error"
fatal-error Msg :- halt Msg.

func fatal-error-w-data string, any.
:name "default-fatal-error-w-data"
fatal-error-w-data Msg Data :- halt Msg ":" Data.

func debug-print string, any.
:name "default-debug-print"
debug-print Msg Data :- print Msg Data.

%  -- Errors, Debugging, Hacks --

func ignore-failure! prop ->.
ignore-failure! P :- P, !.
ignore-failure! _.

func once prop ->.
once P :- P, !.

% [assert! C M] takes the first success of C or fails with message M 
func assert! prop, string.
assert! Cond Msg :- (Cond ; fatal-error-w-data Msg Cond), !.

% [assert-ok! C M] like assert! but the last argument of the predicate must
% be a diagnostic that is printed after M in case it is not ok
func assert-ok! (pred o:diagnostic), string.
assert-ok! Cond Msg :- Cond Diagnostic, !, (Diagnostic = ok ; Diagnostic = error S, fatal-error-w-data Msg S), !.
assert-ok! _ Msg :- fatal-error-w-data Msg "no diagnostic returned".

% [spy P] traces the call to P, printing all success and the final failure
pred spy i:prop.
spy P :- trace.counter "run" NR, if (not(NR = 0)) (debug-print "run=" NR) true,
         debug-print "----<<---- enter: " P,
         P,
         debug-print "---->>---- exit: " P.
spy P :- debug-print "---->>---- fail: " P, fail.

% [spy! P] traces the first call to P without leaving a choice point
func spy! prop.
spy! P :- trace.counter "run" NR, if (not(NR = 0)) (debug-print "run=" NR) true,
         debug-print "----<<---- enter: " P,
         P,
         debug-print "---->>---- exit: " P, !.
spy! P :- debug-print "---->>---- fail: " P, fail.

% to silence the type checker
func unsafe-cast A -> B.
:untyped unsafe-cast X X.

% -- List processing --

func length list A -> int.
length [_|L] N :- length L N1, N is N1 + 1.
length []    0.

func rev list A -> list A.
rev L RL  :- rev.aux L []  RL.

func rev.aux list A, list A -> list A.
rev.aux [X|XS] ACC R :- rev.aux XS [X|ACC] R.
rev.aux [] L L.

func last list A -> A.
last [] _ :- fatal-error "last on empty list".
last [X] X :- !.
last [_|XS] R :- last XS R.

func append list A, list A -> list A.
append [X|XS] L [X|L1] :- append XS L L1 .
append [] L L .

pred appendR o:list A, o:list A, o:list A.
appendR [] L L.
appendR [X|XS] L [X|L1] :- appendR XS L L1.

func take int, list A -> list A.
take 0 _ [] :- !.
take N [X|XS] [X|L] :- !, N1 is N - 1, take N1 XS L.
take _ _ _ :- fatal-error "take run out of list items".

func take-last int, list A -> list A.
take-last N L R :-
  length L M,
  D is M - N,
  drop D L R.

func drop int, list A -> list A.
drop 0 L L :- !.
drop N [_|XS] L :- !, N1 is N - 1, drop N1 XS L.
drop _ _ _ :- fatal-error "drop run out of list items".

func drop-last int, list A -> list A.
drop-last N L R :-
  length L M, I is M - N, take I L R.

func split-at int, list A -> list A, list A.
split-at 0 L [] L :- !.
split-at N [X|XS] [X|LN] LM :- !, N1 is N - 1, split-at N1 XS LN LM.
split-at _ _ _ _ :- fatal-error "split-at run out of list items".

func fold list B, A, (func B, A -> A) -> A.
fold [] A _ A.
fold [X|XS] A F R :- F X A A1, fold XS A1 F R.

func fold-right list B, A, (func B, A -> A) -> A.
fold-right [] A _ A.
fold-right [X|XS] A F R :- fold-right XS A F A', F X A' R.

func fold2 list C, list B, A, (func C, B, A -> A) -> A.
fold2 [] [_|_] _ _ _ :- fatal-error "fold2 on lists of different length".
fold2 [_|_] [] _ _ _ :- fatal-error "fold2 on lists of different length".
fold2 [] [] A _ A.
fold2 [X|XS] [Y|YS] A F R :- F X Y A A1, fold2 XS YS A1 F R.

func map list A, (func A -> B) -> list B.
map [] _ [].
map [X|XS] F [Y|YS] :- F X Y, map XS F YS.

func map-i list A, (func int, A -> B) -> list B.
map-i L F R :- map-i.aux L 0 F R.

func map-i.aux list A, int, (func int, A -> B) -> list B.
map-i.aux [] _ _ [].
map-i.aux [X|XS] N F [Y|YS] :- F N X Y, M is N + 1, map-i.aux XS M F YS.

func map-filter list A, (func A -> B) -> list B.
map-filter [] _ [].
map-filter [X|XS] F [Y|YS] :- F X Y, !, map-filter XS F YS.
map-filter [_|XS] F YS :- map-filter XS F YS.

:index(1 1)
func map2 list A, list B, (func A, B -> C) -> list C.
map2 [] [_|_] _ _ :- fatal-error "map2 on lists of different length".
map2 [_|_] [] _ _ :- fatal-error "map2 on lists of different length".
map2 [] [] _ [].
map2 [X|XS] [Y|YS] F [Z|ZS] :- F X Y Z, map2 XS YS F ZS.

func map2-filter list A, list B, (func A, B -> C) -> list C.
map2-filter [] [_|_] _ _ :- fatal-error "map2-filter on lists of different length".
map2-filter [_|_] [] _ _ :- fatal-error "map2-filter on lists of different length".
map2-filter [] [] _ [].
map2-filter [X|XS] [Y|YS] F [Z|ZS] :- F X Y Z, !, map2-filter XS YS F ZS.
map2-filter [_|XS] [_|YS] F ZS :- map2-filter XS YS F ZS.

func map-ok list A, (func A -> B, diagnostic) -> list B, diagnostic.
map-ok [X|L] P [Y|YS] S :- P X Y S0, if (S0 = ok) (map-ok L P YS S) (S = S0).
map-ok [] _ [] ok.

func fold-map list A, B, (func A, B -> C, B) -> list C, B.
fold-map [] A _ [] A.
fold-map [X|XS] A F [Y|YS] A2 :- F X A Y A1, fold-map XS A1 F YS A2.

func omap option A, (func A -> B) -> option B.
omap none _ none.
omap (some X) F (some Y) :- F X Y.

% [nth N L X] picks in X the N-th element of L (L must be of length > N)
func nth int, list A -> A.
nth 0 [X|_ ] R :- !, X = R.
nth N [_|XS] R :- N > 0, !, N1 is N - 1, nth N1 XS R.
nth N _ _ :- N < 0, !, fatal-error "nth got a negative index".
nth _ _ _ :- fatal-error "nth run out of list items".

% [lookup L K V] sees L as a map from K to V
pred lookup i:list (pair A B), i:A, o:B.
lookup [pr X Y|_] X Y.
lookup [_|LS]       X Y :- lookup LS X Y.

% [lookup! L K V] sees L as a map from K to V, stops at the first binding
func lookup! list (pair A B), A -> B.
lookup! [pr X Y|_] X Y :- !.
lookup! [_|LS]       X Y :- lookup! LS X Y.

% [mem! L X] succeeds once if X occurs inside L 
func mem! list A -> A.
mem! [X|_] X :- !.
mem! [_|L] X :- mem! L X.

% [mem L X] succeeds every time if X occurs inside L 
pred mem i:list A, o:A.
mem [X|_] X.
mem [_|L] X :- mem L X.

pred exists i:list A, i:(pred i:A).
exists [X|_] P :- P X.
exists [_|L] P :- exists L P.

pred exists2 i:list A, i:list B, i:(pred i:A, i:B).
exists2 [] [_|_] _ :- fatal-error "exists2 on lists of different length".
exists2 [_|_] [] _ :- fatal-error "exists2 on lists of different length".
exists2 [X|_] [Y|_] P :- P X Y.
exists2 [_|L] [_|M] P :- exists2 L M P.

func forall list A, (func A).
forall [] _.
forall [X|L] P :- P X, forall L P.

func forall-ok list A, (func A -> diagnostic) -> diagnostic.
forall-ok [X|L] P S :- P X S0, if (S0 = ok) (forall-ok L P S) (S = S0).
forall-ok [] _ ok.

func forall2 list A, list B, (func A, B).
forall2 [] [_|_] _ :- fatal-error "forall2 on lists of different length".
forall2 [_|_] [] _ :- fatal-error "forall2 on lists of different length".
forall2 [X|XS] [Y|YS] P :- P X Y, forall2 XS YS P.
forall2 [] [] _.

func filter list A, (func A) -> list A.
filter []    _ [].
filter [X|L] P R :- if (P X) (R = X :: L1) (R = L1), filter L P L1.

func zip list A, list B -> list (pair A B).
zip [_|_] [] _ :- fatal-error "zip on lists of different length".
zip [] [_|_] _ :- fatal-error "zip on lists of different length".
zip [X|LX] [Y|LY] [pr X Y|LR] :- zip LX LY LR.
zip [] [] [].

func unzip list (pair A B) -> list A, list B.
unzip [] [] [].
unzip [pr X Y|L] [X|LX] [Y|LY] :- unzip L LX LY.

func flatten list (list A) -> list A.
flatten [X|LS] R :- flatten LS LS', append X LS' R.
flatten []     [].

func null list A.
null [].

% [make N E L] L is [E, ..., E] and L has length N
func list.make int, A -> list A.
list.make 0 _ [] :- !.
list.make N E [E|L] :- N' is N - 1, list.make N' E L.

% [init N F L] L is [F 0, ..., F (N-1)]
func list.init int, (func int -> A) -> list A.
list.init N F L :- list.init.aux 0 N F L.

func list.init.aux int, int, (func int -> A) -> list A.
list.init.aux N N _ [] :- !.
list.init.aux N M F [E|L] :- F N E, N' is N + 1, list.init.aux N' M F L.

func iota int -> list int.
iota N L :- list.init N (x\y\ x = y) L.

% [intersperse X L R] R is [L0, X, ..., X, LN]
:index(_ 1)
func intersperse A, list A -> list A.
intersperse _ [] [].
intersperse _ [X] [X] :- !.
intersperse Sep [X|XS] [X,Sep|YS] :- intersperse Sep XS YS.

%  -- Misc --

func flip (func A, B), B, A.
flip P X Y :- P Y X.

func time fprop -> float.
time P T :- gettimeofday Before, P, gettimeofday After, T is After - Before.

func do! list prop.
do! [].
do! [P|PS] :- P, !, do! PS.

:index(_ 1)
func do-ok! diagnostic, list (pred o:diagnostic).
do-ok! ok [].
do-ok! S [P|PS] :- P S0, !, if (S0 = ok) (do-ok! S PS) (S = S0).

pred lift-ok i:prop, i:string, o:diagnostic.
lift-ok P Msg R :- (P, R = ok; R = error Msg).

func spy-do! list prop.
spy-do! L :- map L (x\y\y = spy x) L1, do! L1.

func while-ok-do! diagnostic, list (pred o:diagnostic) -> diagnostic.
while-ok-do! (error _ as E) _ E.
while-ok-do! ok [] ok.
while-ok-do! ok [P|PS] R :- P C, !, while-ok-do! C PS R.

func any->string A -> string.
any->string X Y :- term_to_string X Y.

func max A, A -> A.
max N M N :- N >= M, !.
max _ M M.

% [findall P L] L is the list [P1,P2,P3..] where each Pi is a solution to P.
func findall prop -> list prop.
findall P L :- findall_solutions P L.

}